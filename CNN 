{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Shoham Danino 204287635 Yehonatan Moshkovitz 314767674 - DL Assignment 2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shohamda/-Stream_Probabilistic_Algorithms/blob/main/CNN%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dYgpzGuMdx8-"
      },
      "source": [
        "**Assignment # 2, CNN over Fasion MNIST**\n",
        "\n",
        "In this assignment you are requested to build a convolutional network and train it over the Fasion MNIST data, which is a collection of 28X28 back and white images, classified into 10 different classes of clothing items. For more information about Fashion MNIST you may refer to: \n",
        "https://github.com/zalandoresearch/fashion-mnist "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q5w6wIzcd1LG"
      },
      "source": [
        "# Loading Fashion MNIST\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import torch.nn.functional as F\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "trainset = torchvision.datasets.FashionMNIST(root='./data', train=True,\n",
        "                                        download=True, transform=transforms.ToTensor())\n",
        "\n",
        "testset = torchvision.datasets.FashionMNIST(root='./data', train=False,\n",
        "                                       download=True, transform=transforms.ToTensor())\n",
        "\n",
        "classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress',\n",
        "           'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Xs3rDG0xBmL"
      },
      "source": [
        "# Use dataloaders for train and test (batch size is 4)\n",
        "\n",
        "trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n",
        "                                          shuffle=True)\n",
        "\n",
        "testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n",
        "                                         shuffle=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bKOHObeAj99B",
        "outputId": "274d7ea4-a7f2-4a2d-9d4e-2549f53f0f23"
      },
      "source": [
        "# The images are of 1, 28, 28 size (only one black-white channel)\n",
        "\n",
        "trainset[0][0].shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 28, 28])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E6jH2cjTVnVi"
      },
      "source": [
        "# **Part 1**: Implementing a CNN network for Fashion MNIST\n",
        "Here is what you need to do; you are encoureged to look at notebook \"DL Notebook 9 - CIFAR CNN\" when trying to complete the next steps.\n",
        "\n",
        "\n",
        "Write a network CNNFMnist, that has the following architecture:\n",
        "\n",
        "* Convolution with 10 3X3 filters\n",
        "* Relu\n",
        "* Max pool with 2X2\n",
        "* Convolution with 5 3X3 filters\n",
        "* Relu\n",
        "* Convolution with 16 3X3 filters\n",
        "* Relu\n",
        "* Max pool with 2X2\n",
        "* Liner, output size 128\n",
        "* Relu\n",
        "* Liner, output size 64\n",
        "* Relu\n",
        "* Liner, output size 10"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rIhpQjIsG6MO"
      },
      "source": [
        "trainset[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hoiGc1-donFO"
      },
      "source": [
        "class CNNFMnist(nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(CNNFMnist, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(1, 10, 3)\n",
        "        self.conv2 = nn.Conv2d(10, 5, 3)\n",
        "        self.conv3 = nn.Conv2d(5, 16, 3)\n",
        "\n",
        "        #self.fc1 = nn.Linear(16 * 3 * 3, 128)\n",
        "        self.fc1 = nn.Linear(256, 128)\n",
        "        self.fc2 = nn.Linear(128, 64)\n",
        "        self.fc3 = nn.Linear(64, 10)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        #x = F.relu(self.conv1(x))\n",
        "        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))\n",
        "        x = F.relu(self.conv2(x))\n",
        "        #x = F.relu(self.conv3(x))\n",
        "        x = F.max_pool2d(F.relu(self.conv3(x)), (2,2))\n",
        "        x = torch.flatten(x, start_dim=1)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        h = x\n",
        "        x = self.fc3(x)\n",
        "        return h, x\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ksWPM9kvYWmC"
      },
      "source": [
        "Write a code that trains the network with FashionMNIST train dataset, for classification (use cross entropy, and SGD).\n",
        "Run the network for at least 10 epochs, over the entire dataset. Make sure to print the loss over the train set as well as the **test set** over time (say, every 1000 batches, but it's up to you), so you will know where you are during training. \n",
        "\n",
        "Note, measuring loss of test is similar to measuring loss over the train test. However, make sure not to run the test images in back propagation. Use them only in forward and calulate the average loss over the entire test set. Since it will make the training process run slower, you should measure loss for the test set only at the end of an epoch (so overall you get 10 loss values for the test set). You are encoureged to write a different function for claculating the loss of the test set, and then call it from the training procedure.\n",
        "\n",
        "\n",
        "You should collect the loss values in an array, so you can plot then into two curves, one for train and one for test.\n",
        "\n",
        "In addition, you should measure the time it takes you to train the network completely.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vJ7qX52gY5-a",
        "outputId": "61ee09f5-90e6-44de-ff55-286cf9d7e81a"
      },
      "source": [
        "net = CNNFMnist()            # -- For CPU\r\n",
        "\r\n",
        "print(net)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CNNFMnist(\n",
            "  (conv1): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (conv2): Conv2d(10, 5, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (conv3): Conv2d(5, 16, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (fc1): Linear(in_features=256, out_features=128, bias=True)\n",
            "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
            "  (fc3): Linear(in_features=64, out_features=10, bias=True)\n",
            ")\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FIfvrGslPqBr"
      },
      "source": [
        "# define loss function\r\n",
        "\r\n",
        "criterion = nn.CrossEntropyLoss()\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q7ga0Es5PuBk"
      },
      "source": [
        "# define the optimizer\r\n",
        "\r\n",
        "optimizer = torch.optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-JZUehzmklvU"
      },
      "source": [
        "# training loop\r\n",
        "def test_net():\r\n",
        "    test_loss = []\r\n",
        "    for data in testloader:\r\n",
        "        inputs, labels = data\r\n",
        "        #inputs = inputs.cuda() # -- for GPU\r\n",
        "        #labels = labels.cuda() # -- for GPU\r\n",
        "        \r\n",
        "        _, outputs = net(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        test_loss.append(loss.item())\r\n",
        "\r\n",
        "    # return average loss over all test set\r\n",
        "    return sum(test_loss) / len(test_loss)\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C16dvEquP0Vc",
        "outputId": "47b64e5a-3830-4d67-91cf-9505a476fefd"
      },
      "source": [
        "train_loss = []\r\n",
        "test_loss = []\r\n",
        "interval_tuples = []\r\n",
        "\r\n",
        "start = torch.cuda.Event(enable_timing=True)\r\n",
        "end = torch.cuda.Event(enable_timing=True)\r\n",
        "\r\n",
        "start.record()\r\n",
        "for epoch in range(10):\r\n",
        "\r\n",
        "    running_train_loss = 0.0\r\n",
        "    for i, data in enumerate(trainloader, 0):\r\n",
        "        inputs, labels = data\r\n",
        "\r\n",
        "        optimizer.zero_grad()\r\n",
        "\r\n",
        "        _, outputs = net(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        loss.backward()\r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        running_train_loss += loss.item()\r\n",
        "        if (i+1) % 1000 == 0:    \r\n",
        "            interval_tuples.append(str((epoch + 1, i + 1)))\r\n",
        "            train_loss.append(running_train_loss / 1000)\r\n",
        "            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_train_loss / 1000))\r\n",
        "            running_train_loss = 0.0\r\n",
        "\r\n",
        "    net.eval()\r\n",
        "    with torch.no_grad():   \r\n",
        "        running_test_loss = test_net()\r\n",
        "        print(\"epoch {}, test loss: {}\\n\".format(epoch + 1, running_test_loss))\r\n",
        "        test_loss.append(running_test_loss)\r\n",
        "    net.train()\r\n",
        "\r\n",
        "print('Finished Training')\r\n",
        "end.record()\r\n",
        "# Waits for everything to finish running\r\n",
        "torch.cuda.synchronize()\r\n",
        "\r\n",
        "mnist_cpu=(start.elapsed_time(end)/1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1,  1000] loss: 2.302\n",
            "[1,  2000] loss: 2.303\n",
            "[1,  3000] loss: 2.301\n",
            "[1,  4000] loss: 2.292\n",
            "[1,  5000] loss: 1.825\n",
            "[1,  6000] loss: 0.946\n",
            "[1,  7000] loss: 0.804\n",
            "[1,  8000] loss: 0.720\n",
            "[1,  9000] loss: 0.645\n",
            "[1, 10000] loss: 0.624\n",
            "[1, 11000] loss: 0.619\n",
            "[1, 12000] loss: 0.602\n",
            "[1, 13000] loss: 0.591\n",
            "[1, 14000] loss: 0.565\n",
            "[1, 15000] loss: 0.523\n",
            "epoch 1, test loss: 0.5411302579953335\n",
            "\n",
            "[2,  1000] loss: 0.543\n",
            "[2,  2000] loss: 0.521\n",
            "[2,  3000] loss: 0.503\n",
            "[2,  4000] loss: 0.489\n",
            "[2,  5000] loss: 0.500\n",
            "[2,  6000] loss: 0.504\n",
            "[2,  7000] loss: 0.484\n",
            "[2,  8000] loss: 0.483\n",
            "[2,  9000] loss: 0.463\n",
            "[2, 10000] loss: 0.454\n",
            "[2, 11000] loss: 0.435\n",
            "[2, 12000] loss: 0.434\n",
            "[2, 13000] loss: 0.431\n",
            "[2, 14000] loss: 0.442\n",
            "[2, 15000] loss: 0.423\n",
            "epoch 2, test loss: 0.4277845690272283\n",
            "\n",
            "[3,  1000] loss: 0.408\n",
            "[3,  2000] loss: 0.395\n",
            "[3,  3000] loss: 0.401\n",
            "[3,  4000] loss: 0.407\n",
            "[3,  5000] loss: 0.413\n",
            "[3,  6000] loss: 0.379\n",
            "[3,  7000] loss: 0.398\n",
            "[3,  8000] loss: 0.417\n",
            "[3,  9000] loss: 0.381\n",
            "[3, 10000] loss: 0.379\n",
            "[3, 11000] loss: 0.378\n",
            "[3, 12000] loss: 0.381\n",
            "[3, 13000] loss: 0.370\n",
            "[3, 14000] loss: 0.388\n",
            "[3, 15000] loss: 0.375\n",
            "epoch 3, test loss: 0.43100528925021064\n",
            "\n",
            "[4,  1000] loss: 0.367\n",
            "[4,  2000] loss: 0.369\n",
            "[4,  3000] loss: 0.362\n",
            "[4,  4000] loss: 0.354\n",
            "[4,  5000] loss: 0.353\n",
            "[4,  6000] loss: 0.361\n",
            "[4,  7000] loss: 0.333\n",
            "[4,  8000] loss: 0.328\n",
            "[4,  9000] loss: 0.336\n",
            "[4, 10000] loss: 0.348\n",
            "[4, 11000] loss: 0.337\n",
            "[4, 12000] loss: 0.388\n",
            "[4, 13000] loss: 0.341\n",
            "[4, 14000] loss: 0.338\n",
            "[4, 15000] loss: 0.342\n",
            "epoch 4, test loss: 0.35078313990973037\n",
            "\n",
            "[5,  1000] loss: 0.302\n",
            "[5,  2000] loss: 0.346\n",
            "[5,  3000] loss: 0.330\n",
            "[5,  4000] loss: 0.325\n",
            "[5,  5000] loss: 0.334\n",
            "[5,  6000] loss: 0.348\n",
            "[5,  7000] loss: 0.331\n",
            "[5,  8000] loss: 0.317\n",
            "[5,  9000] loss: 0.325\n",
            "[5, 10000] loss: 0.330\n",
            "[5, 11000] loss: 0.307\n",
            "[5, 12000] loss: 0.324\n",
            "[5, 13000] loss: 0.330\n",
            "[5, 14000] loss: 0.322\n",
            "[5, 15000] loss: 0.323\n",
            "epoch 5, test loss: 0.34139486794814\n",
            "\n",
            "[6,  1000] loss: 0.317\n",
            "[6,  2000] loss: 0.320\n",
            "[6,  3000] loss: 0.294\n",
            "[6,  4000] loss: 0.311\n",
            "[6,  5000] loss: 0.304\n",
            "[6,  6000] loss: 0.294\n",
            "[6,  7000] loss: 0.311\n",
            "[6,  8000] loss: 0.321\n",
            "[6,  9000] loss: 0.316\n",
            "[6, 10000] loss: 0.309\n",
            "[6, 11000] loss: 0.297\n",
            "[6, 12000] loss: 0.303\n",
            "[6, 13000] loss: 0.289\n",
            "[6, 14000] loss: 0.317\n",
            "[6, 15000] loss: 0.313\n",
            "epoch 6, test loss: 0.3229081488456817\n",
            "\n",
            "[7,  1000] loss: 0.279\n",
            "[7,  2000] loss: 0.308\n",
            "[7,  3000] loss: 0.324\n",
            "[7,  4000] loss: 0.286\n",
            "[7,  5000] loss: 0.303\n",
            "[7,  6000] loss: 0.290\n",
            "[7,  7000] loss: 0.286\n",
            "[7,  8000] loss: 0.268\n",
            "[7,  9000] loss: 0.292\n",
            "[7, 10000] loss: 0.313\n",
            "[7, 11000] loss: 0.306\n",
            "[7, 12000] loss: 0.292\n",
            "[7, 13000] loss: 0.279\n",
            "[7, 14000] loss: 0.292\n",
            "[7, 15000] loss: 0.289\n",
            "epoch 7, test loss: 0.3427590884833044\n",
            "\n",
            "[8,  1000] loss: 0.293\n",
            "[8,  2000] loss: 0.260\n",
            "[8,  3000] loss: 0.288\n",
            "[8,  4000] loss: 0.297\n",
            "[8,  5000] loss: 0.275\n",
            "[8,  6000] loss: 0.297\n",
            "[8,  7000] loss: 0.277\n",
            "[8,  8000] loss: 0.293\n",
            "[8,  9000] loss: 0.287\n",
            "[8, 10000] loss: 0.282\n",
            "[8, 11000] loss: 0.274\n",
            "[8, 12000] loss: 0.270\n",
            "[8, 13000] loss: 0.284\n",
            "[8, 14000] loss: 0.269\n",
            "[8, 15000] loss: 0.274\n",
            "epoch 8, test loss: 0.3268706131146657\n",
            "\n",
            "[9,  1000] loss: 0.284\n",
            "[9,  2000] loss: 0.266\n",
            "[9,  3000] loss: 0.264\n",
            "[9,  4000] loss: 0.268\n",
            "[9,  5000] loss: 0.282\n",
            "[9,  6000] loss: 0.262\n",
            "[9,  7000] loss: 0.255\n",
            "[9,  8000] loss: 0.278\n",
            "[9,  9000] loss: 0.268\n",
            "[9, 10000] loss: 0.261\n",
            "[9, 11000] loss: 0.283\n",
            "[9, 12000] loss: 0.262\n",
            "[9, 13000] loss: 0.270\n",
            "[9, 14000] loss: 0.275\n",
            "[9, 15000] loss: 0.270\n",
            "epoch 9, test loss: 0.31930410791717984\n",
            "\n",
            "[10,  1000] loss: 0.253\n",
            "[10,  2000] loss: 0.265\n",
            "[10,  3000] loss: 0.266\n",
            "[10,  4000] loss: 0.267\n",
            "[10,  5000] loss: 0.261\n",
            "[10,  6000] loss: 0.253\n",
            "[10,  7000] loss: 0.258\n",
            "[10,  8000] loss: 0.259\n",
            "[10,  9000] loss: 0.261\n",
            "[10, 10000] loss: 0.258\n",
            "[10, 11000] loss: 0.273\n",
            "[10, 12000] loss: 0.277\n",
            "[10, 13000] loss: 0.269\n",
            "[10, 14000] loss: 0.258\n",
            "[10, 15000] loss: 0.270\n",
            "epoch 10, test loss: 0.3273505329116265\n",
            "\n",
            "Finished Training\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "TvsyACHTwz8l",
        "outputId": "0a2ecd22-6d2f-4c32-e9a8-6990acf04255"
      },
      "source": [
        "# print train loss graph per batch\r\n",
        "plt.figure(figsize=(25,10))\r\n",
        "plt.plot(interval_tuples, train_loss)\r\n",
        "plt.xlabel('(epoch, batch)')\r\n",
        "plt.ylabel('loss')\r\n",
        "plt.title('train-set loss per epochs')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "gkB14VWg1mU-",
        "outputId": "df4c6174-221d-450a-9b5d-c010a99a9a85"
      },
      "source": [
        "# Visualization of train and test loss\r\n",
        "plt.plot(range(1,11), train_loss[::15], color='blue')\r\n",
        "plt.plot(range(1,11),test_loss, color='red')\r\n",
        "plt.legend([\"train\", \"test\"], loc =\"best\") \r\n",
        "plt.xlabel('epoch')\r\n",
        "plt.ylabel('loss')\r\n",
        "plt.title('loss over train and test sets')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Aa0sxqAhY8wA"
      },
      "source": [
        "Write a function that evaluates the resulted model over the entire test data of FashionMNIST. Provide a single accuracy number."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uzuGund9aBOp",
        "outputId": "41303c93-febb-494c-c7b7-e87fdcfbe004"
      },
      "source": [
        "correct = 0\r\n",
        "total = 0\r\n",
        "with torch.no_grad():\r\n",
        "    for data in testloader:\r\n",
        "        images, labels = data\r\n",
        "\r\n",
        "        _, outputs = net(images)\r\n",
        "        _, predicted = torch.max(outputs.data, 1)\r\n",
        "        total += labels.size(0)\r\n",
        "        correct += (predicted == labels).sum().item()\r\n",
        "\r\n",
        "print('Accuracy of the network on the test images: %d %%' % (100 * correct / total))\r\n",
        "acc_cpu = (100 * correct / total)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the test images: 88 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rMnb9gSGaIjP"
      },
      "source": [
        "# **Part 2**: Training with a GPU \n",
        "You are requested to change your code to use the GPU instead of the CPU.\n",
        "This can be easily done bu converting every torch.tensor to torch.cuda.tensor. \n",
        "\n",
        "Specific instructions:\n",
        "* Change the hardware equipent of your colab notebook. To do that, go to the \"Runtime\" menu, and then to \"Change runtime type\". In the dialog box, change \"Hardware accelerator\" to GPU.\n",
        "* Please follow the lines that were commented out with the comment    # -- For GPU\n",
        "* Also, remove the lines that have the comment # -- For CPU\n",
        "\n",
        "Train your network again and compare training time."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RTCs14i0RmOn"
      },
      "source": [
        "#copy the same code with GPU insted of CPU\r\n",
        "\r\n",
        "import torch\r\n",
        "import torch.nn as nn\r\n",
        "import torchvision\r\n",
        "import torchvision.transforms as transforms\r\n",
        "import torch.nn.functional as F\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "trainset = torchvision.datasets.FashionMNIST(root='./data', train=True,\r\n",
        "                                        download=True, transform=transforms.ToTensor())\r\n",
        "\r\n",
        "testset = torchvision.datasets.FashionMNIST(root='./data', train=False,\r\n",
        "                                       download=True, transform=transforms.ToTensor())\r\n",
        "\r\n",
        "classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress',\r\n",
        "           'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kAyzXnCl6BJP"
      },
      "source": [
        "# Use dataloaders for train and test (batch size is 4)\r\n",
        "\r\n",
        "trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\r\n",
        "                                          shuffle=True)\r\n",
        "\r\n",
        "testloader = torch.utils.data.DataLoader(testset, batch_size=4,\r\n",
        "                                         shuffle=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EpbZvoRT6Io0",
        "outputId": "a14b1d66-19ea-4458-c977-204a322d5e0f"
      },
      "source": [
        "# The images are of 1, 28, 28 size (only one black-white channel)\r\n",
        "\r\n",
        "trainset[0][0].shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 28, 28])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MTRWxLoz6NN-"
      },
      "source": [
        "class CNNFMnist(nn.Module):\r\n",
        "\r\n",
        "    def __init__(self):\r\n",
        "        super(CNNFMnist, self).__init__()\r\n",
        "        self.conv1 = nn.Conv2d(1, 10, 3)\r\n",
        "        self.conv2 = nn.Conv2d(10, 5, 3)\r\n",
        "        self.conv3 = nn.Conv2d(5, 16, 3)\r\n",
        "\r\n",
        "        self.fc1 = nn.Linear(256, 128)\r\n",
        "        self.fc2 = nn.Linear(128, 64)\r\n",
        "        self.fc3 = nn.Linear(64, 10)\r\n",
        "\r\n",
        "\r\n",
        "    def forward(self, x):\r\n",
        "        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))\r\n",
        "        x = F.relu(self.conv2(x))\r\n",
        "        x = F.max_pool2d(F.relu(self.conv3(x)), (2,2))\r\n",
        "        x = torch.flatten(x, start_dim=1)\r\n",
        "        x = F.relu(self.fc1(x))\r\n",
        "        x = F.relu(self.fc2(x))\r\n",
        "        h = x\r\n",
        "        x = self.fc3(x)\r\n",
        "        return h, x\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zP1hZYGB6Wj8",
        "outputId": "a423f470-8621-4ef4-e80e-9b67dc3425b2"
      },
      "source": [
        "net = CNNFMnist().cuda()     # -- For GPU\r\n",
        "\r\n",
        "print(net)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CNNFMnist(\n",
            "  (conv1): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (conv2): Conv2d(10, 5, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (conv3): Conv2d(5, 16, kernel_size=(3, 3), stride=(1, 1))\n",
            "  (fc1): Linear(in_features=256, out_features=128, bias=True)\n",
            "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
            "  (fc3): Linear(in_features=64, out_features=10, bias=True)\n",
            ")\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4zqGxeXj6XJF"
      },
      "source": [
        "# define loss function\r\n",
        "\r\n",
        "criterion = nn.CrossEntropyLoss()\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fW5_6F7N6gIb"
      },
      "source": [
        "# define the optimizer\r\n",
        "\r\n",
        "optimizer = torch.optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BS4s0B1Y6hGc"
      },
      "source": [
        "# training loop\r\n",
        "def test_net():\r\n",
        "    test_loss = []\r\n",
        "    for data in testloader:\r\n",
        "        inputs, labels = data\r\n",
        "        inputs = inputs.cuda() # -- for GPU\r\n",
        "        labels = labels.cuda() # -- for GPU\r\n",
        "        \r\n",
        "        _, outputs = net(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        test_loss.append(loss.item())\r\n",
        "\r\n",
        "    # return average loss over all test set\r\n",
        "    return sum(test_loss) / len(test_loss)\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0AbvYq7u6hXM",
        "outputId": "d381d0ce-faca-421c-9ccb-863095d2305f"
      },
      "source": [
        "train_loss = []\r\n",
        "test_loss = []\r\n",
        "interval_tuples = []\r\n",
        "\r\n",
        "start = torch.cuda.Event(enable_timing=True)\r\n",
        "end = torch.cuda.Event(enable_timing=True)\r\n",
        "\r\n",
        "start.record()\r\n",
        "for epoch in range(10):\r\n",
        "\r\n",
        "    running_train_loss = 0.0\r\n",
        "    for i, data in enumerate(trainloader, 0):\r\n",
        "        inputs, labels = data\r\n",
        "        inputs = inputs.cuda() # -- For GPU\r\n",
        "        labels = labels.cuda() # -- For GPU\r\n",
        "\r\n",
        "        optimizer.zero_grad()\r\n",
        "\r\n",
        "        _, outputs = net(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        loss.backward()\r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        running_train_loss += loss.item()\r\n",
        "        if (i+1) % 1000 == 0:    \r\n",
        "            interval_tuples.append(str((epoch + 1, i + 1)))\r\n",
        "            train_loss.append(running_train_loss / 1000)\r\n",
        "            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_train_loss / 1000))\r\n",
        "            running_train_loss = 0.0\r\n",
        "\r\n",
        "    net.eval()\r\n",
        "    with torch.no_grad():   \r\n",
        "        running_test_loss = test_net()\r\n",
        "        print(\"epoch {}, test loss: {}\\n\".format(epoch + 1, running_test_loss))\r\n",
        "        test_loss.append(running_test_loss)\r\n",
        "    net.train()\r\n",
        "\r\n",
        "print('Finished Training')\r\n",
        "end.record()\r\n",
        "# Waits for everything to finish running\r\n",
        "torch.cuda.synchronize()\r\n",
        "\r\n",
        "mnist_gpu=(start.elapsed_time(end)/1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1,  1000] loss: 2.299\n",
            "[1,  2000] loss: 1.807\n",
            "[1,  3000] loss: 0.920\n",
            "[1,  4000] loss: 0.761\n",
            "[1,  5000] loss: 0.701\n",
            "[1,  6000] loss: 0.647\n",
            "[1,  7000] loss: 0.584\n",
            "[1,  8000] loss: 0.575\n",
            "[1,  9000] loss: 0.557\n",
            "[1, 10000] loss: 0.548\n",
            "[1, 11000] loss: 0.548\n",
            "[1, 12000] loss: 0.523\n",
            "[1, 13000] loss: 0.510\n",
            "[1, 14000] loss: 0.482\n",
            "[1, 15000] loss: 0.482\n",
            "epoch 1, test loss: 0.5253402787972474\n",
            "\n",
            "[2,  1000] loss: 0.454\n",
            "[2,  2000] loss: 0.465\n",
            "[2,  3000] loss: 0.473\n",
            "[2,  4000] loss: 0.439\n",
            "[2,  5000] loss: 0.455\n",
            "[2,  6000] loss: 0.447\n",
            "[2,  7000] loss: 0.434\n",
            "[2,  8000] loss: 0.429\n",
            "[2,  9000] loss: 0.408\n",
            "[2, 10000] loss: 0.406\n",
            "[2, 11000] loss: 0.397\n",
            "[2, 12000] loss: 0.391\n",
            "[2, 13000] loss: 0.388\n",
            "[2, 14000] loss: 0.382\n",
            "[2, 15000] loss: 0.388\n",
            "epoch 2, test loss: 0.39766044757386554\n",
            "\n",
            "[3,  1000] loss: 0.374\n",
            "[3,  2000] loss: 0.362\n",
            "[3,  3000] loss: 0.366\n",
            "[3,  4000] loss: 0.361\n",
            "[3,  5000] loss: 0.356\n",
            "[3,  6000] loss: 0.384\n",
            "[3,  7000] loss: 0.367\n",
            "[3,  8000] loss: 0.348\n",
            "[3,  9000] loss: 0.365\n",
            "[3, 10000] loss: 0.370\n",
            "[3, 11000] loss: 0.334\n",
            "[3, 12000] loss: 0.362\n",
            "[3, 13000] loss: 0.363\n",
            "[3, 14000] loss: 0.359\n",
            "[3, 15000] loss: 0.368\n",
            "epoch 3, test loss: 0.3924622528695472\n",
            "\n",
            "[4,  1000] loss: 0.339\n",
            "[4,  2000] loss: 0.327\n",
            "[4,  3000] loss: 0.333\n",
            "[4,  4000] loss: 0.324\n",
            "[4,  5000] loss: 0.340\n",
            "[4,  6000] loss: 0.331\n",
            "[4,  7000] loss: 0.340\n",
            "[4,  8000] loss: 0.337\n",
            "[4,  9000] loss: 0.338\n",
            "[4, 10000] loss: 0.321\n",
            "[4, 11000] loss: 0.327\n",
            "[4, 12000] loss: 0.326\n",
            "[4, 13000] loss: 0.322\n",
            "[4, 14000] loss: 0.324\n",
            "[4, 15000] loss: 0.348\n",
            "epoch 4, test loss: 0.35328939335298637\n",
            "\n",
            "[5,  1000] loss: 0.310\n",
            "[5,  2000] loss: 0.299\n",
            "[5,  3000] loss: 0.333\n",
            "[5,  4000] loss: 0.309\n",
            "[5,  5000] loss: 0.316\n",
            "[5,  6000] loss: 0.324\n",
            "[5,  7000] loss: 0.315\n",
            "[5,  8000] loss: 0.325\n",
            "[5,  9000] loss: 0.318\n",
            "[5, 10000] loss: 0.333\n",
            "[5, 11000] loss: 0.315\n",
            "[5, 12000] loss: 0.296\n",
            "[5, 13000] loss: 0.310\n",
            "[5, 14000] loss: 0.305\n",
            "[5, 15000] loss: 0.294\n",
            "epoch 5, test loss: 0.3452183854013885\n",
            "\n",
            "[6,  1000] loss: 0.307\n",
            "[6,  2000] loss: 0.285\n",
            "[6,  3000] loss: 0.295\n",
            "[6,  4000] loss: 0.284\n",
            "[6,  5000] loss: 0.290\n",
            "[6,  6000] loss: 0.316\n",
            "[6,  7000] loss: 0.312\n",
            "[6,  8000] loss: 0.284\n",
            "[6,  9000] loss: 0.298\n",
            "[6, 10000] loss: 0.300\n",
            "[6, 11000] loss: 0.304\n",
            "[6, 12000] loss: 0.280\n",
            "[6, 13000] loss: 0.307\n",
            "[6, 14000] loss: 0.280\n",
            "[6, 15000] loss: 0.311\n",
            "epoch 6, test loss: 0.31905608253731693\n",
            "\n",
            "[7,  1000] loss: 0.284\n",
            "[7,  2000] loss: 0.288\n",
            "[7,  3000] loss: 0.277\n",
            "[7,  4000] loss: 0.260\n",
            "[7,  5000] loss: 0.279\n",
            "[7,  6000] loss: 0.287\n",
            "[7,  7000] loss: 0.283\n",
            "[7,  8000] loss: 0.283\n",
            "[7,  9000] loss: 0.283\n",
            "[7, 10000] loss: 0.285\n",
            "[7, 11000] loss: 0.280\n",
            "[7, 12000] loss: 0.292\n",
            "[7, 13000] loss: 0.297\n",
            "[7, 14000] loss: 0.311\n",
            "[7, 15000] loss: 0.304\n",
            "epoch 7, test loss: 0.32800744074071736\n",
            "\n",
            "[8,  1000] loss: 0.268\n",
            "[8,  2000] loss: 0.261\n",
            "[8,  3000] loss: 0.279\n",
            "[8,  4000] loss: 0.270\n",
            "[8,  5000] loss: 0.263\n",
            "[8,  6000] loss: 0.275\n",
            "[8,  7000] loss: 0.288\n",
            "[8,  8000] loss: 0.286\n",
            "[8,  9000] loss: 0.293\n",
            "[8, 10000] loss: 0.264\n",
            "[8, 11000] loss: 0.297\n",
            "[8, 12000] loss: 0.272\n",
            "[8, 13000] loss: 0.273\n",
            "[8, 14000] loss: 0.286\n",
            "[8, 15000] loss: 0.279\n",
            "epoch 8, test loss: 0.312389716044446\n",
            "\n",
            "[9,  1000] loss: 0.275\n",
            "[9,  2000] loss: 0.251\n",
            "[9,  3000] loss: 0.262\n",
            "[9,  4000] loss: 0.276\n",
            "[9,  5000] loss: 0.269\n",
            "[9,  6000] loss: 0.273\n",
            "[9,  7000] loss: 0.281\n",
            "[9,  8000] loss: 0.265\n",
            "[9,  9000] loss: 0.260\n",
            "[9, 10000] loss: 0.259\n",
            "[9, 11000] loss: 0.268\n",
            "[9, 12000] loss: 0.282\n",
            "[9, 13000] loss: 0.271\n",
            "[9, 14000] loss: 0.285\n",
            "[9, 15000] loss: 0.249\n",
            "epoch 9, test loss: 0.31911123925960455\n",
            "\n",
            "[10,  1000] loss: 0.250\n",
            "[10,  2000] loss: 0.257\n",
            "[10,  3000] loss: 0.250\n",
            "[10,  4000] loss: 0.266\n",
            "[10,  5000] loss: 0.249\n",
            "[10,  6000] loss: 0.249\n",
            "[10,  7000] loss: 0.267\n",
            "[10,  8000] loss: 0.260\n",
            "[10,  9000] loss: 0.260\n",
            "[10, 10000] loss: 0.252\n",
            "[10, 11000] loss: 0.251\n",
            "[10, 12000] loss: 0.287\n",
            "[10, 13000] loss: 0.257\n",
            "[10, 14000] loss: 0.261\n",
            "[10, 15000] loss: 0.261\n",
            "epoch 10, test loss: 0.3165177523903985\n",
            "\n",
            "Finished Training\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "Ur073lPj6uWJ",
        "outputId": "13b22130-d209-4543-8dd4-1727aecc0bf5"
      },
      "source": [
        "# print train loss graph per batch\r\n",
        "plt.figure(figsize=(25,10))\r\n",
        "plt.plot(interval_tuples, train_loss)\r\n",
        "plt.xlabel('(epoch, batch)')\r\n",
        "plt.ylabel('loss')\r\n",
        "plt.title('train-set loss per epochs')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "hdSRA1lZ62iI",
        "outputId": "ab571b11-e486-4c03-e7c7-d75281cef24e"
      },
      "source": [
        "# Visualization of train and test loss\r\n",
        "plt.plot(range(1,11), train_loss[::15], color='blue')\r\n",
        "plt.plot(range(1,11),test_loss, color='red')\r\n",
        "plt.legend([\"train\", \"test\"], loc =\"best\") \r\n",
        "plt.xlabel('epoch')\r\n",
        "plt.ylabel('loss')\r\n",
        "plt.title('loss over train and test sets')\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wokiu3ZYc6rU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43e5617b-c8e9-4987-8e1d-b8fd26741a3e"
      },
      "source": [
        "correct = 0\r\n",
        "total = 0\r\n",
        "with torch.no_grad():\r\n",
        "    for data in testloader:\r\n",
        "        images, labels = data\r\n",
        "        images = images.cuda()  # -- for GPU\r\n",
        "        labels = labels.cuda()  # -- for GPU\r\n",
        "\r\n",
        "        _, outputs = net(images)\r\n",
        "        _, predicted = torch.max(outputs.data, 1)\r\n",
        "        total += labels.size(0)\r\n",
        "        correct += (predicted == labels).sum().item()\r\n",
        "\r\n",
        "print('Accuracy of the network on the test images: %d %%' % (100 * correct / total))\r\n",
        "acc_gpu = (100 * correct / total)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the test images: 88 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "SlSqhbN_34aE",
        "outputId": "66c6bb6b-708a-4429-e89d-93ef91c190e3"
      },
      "source": [
        "#comparing GPU and CPU\r\n",
        "\r\n",
        "\r\n",
        "#print time graph\r\n",
        "plt.bar(('cpu', 'gpu'), (mnist_cpu, mnist_gpu))\r\n",
        "plt.title('time (in seconds)')\r\n",
        "plt.show()\r\n",
        "\r\n",
        "#print accuracy graph that should be the same\r\n",
        "plt.bar(('cpu', 'gpu'), (acc_cpu,acc_gpu))\r\n",
        "plt.title('accuracy')\r\n",
        "\r\n",
        "plt.show()\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FdYn8JXyLk07"
      },
      "source": [
        "# **Part 3**: Transfer Learning\n",
        "Traininng data is a valuable resource, and sometimes there is not enough of it for traiing a neural netowrk at scale. To handle this situation, one approach is transfer learning, where we train our network on a different related task, and then switch to train it on the downstream task that we focus on. In this last part of the assignment, you are requested to pretrain your network on CIFAR-10, then train it on Fashion-MNIST, and measure its contribution to the results. To do that, please follow the steps:\n",
        "\n",
        "**Step 1**\n",
        "\n",
        "Modify your CNNFMnist implementation to return the output of the layer one before last after Relu (Linear layer of size 64, above) in addition to the final output. For example:\n",
        "\n",
        "```\n",
        "def forward(self, x):\n",
        "  ...\n",
        "  return h, out\n",
        "```\n",
        "\n",
        " and train it on the training-set part of CIFAR-10. Use batch size of 4, and train it for at least 10 epochs. Note that CIFAR-10 images are of different shapes (3X32X32), therefore a conversion into 1X28X28 is needed. To do that, when you load CIFAR-10 using a torchvision Dataset, you can use the transformer torchvision.transforms.Grayscale(num_output_channels=1) in order to convert the images to a 1X32X32 grayscale volume:\n",
        "\n",
        "```\n",
        "trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n",
        "                                        download=True, transform=torchvision.transforms.Compose([torchvision.transforms.Grayscale(num_output_channels=1),\n",
        "                                    torchvision.transforms.ToTensor()]))\n",
        "```\n",
        "Then, from each 1X32X32 image, sample 10 1X28X28 images at random positions, and use them for training (*optional* - for data augmentation, if you want, you can also generate the reflection of each of the 10 images and add them the training set).\n",
        "\n",
        "**Setp 2**\n",
        "\n",
        "Once done, write a new Module CNNFMnist2, which uses CNNFMnist as one of its sub modules, followed by some additional layers. The output of CNNFMnist that goes into the next layer, should be the output of the 64 neuron one-before-last layer, as described above. CNNFMnist2 should have the following architecture:\n",
        "\n",
        "* CNNFMnist\n",
        "* Liner, output size 32\n",
        "* Relu\n",
        "* Liner, output size 16\n",
        "* Relu\n",
        "* Liner, output size 10\n",
        "\n",
        "Make sure to allow the user to assign a pre-trained version CNNFMnist as a member of the module. For example:\n",
        "\n",
        "```\n",
        "class CNNFMnist2(nn.Module):\n",
        "    def __init__(self, trained_cnnfmnist_model):\n",
        "        super(CNNFMnist2, self).__init__()\n",
        "        self.trained_cnnfmnist_model = trained_cnnfmnist_model\n",
        "        self.fc1 = nn.Linear(64, 32)\n",
        "        ...\n",
        "```\n",
        "\n",
        "**Step 3**\n",
        "\n",
        "Train and eval CNNFMnist2 on Fashion-MNIST a few times:\n",
        "- Using the pre-trained version of CNNFMnist.\n",
        "- Using a fresh CNNFMnist instance (without training it).\n",
        "- (Optional) Using the pre-trained version of CNNFMnist, after freezing its weights using the .eval() function.\n",
        "\n",
        "Report on evaluation results (accuracy) for all of those cases."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2woeTBdbShds",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bba417c7-6a59-4db9-f166-b2b6d2d9ce4a"
      },
      "source": [
        "train_data = torchvision.datasets.CIFAR10(root='./data', train=True,\r\n",
        "                                        download=True, transform=torchvision.transforms.Compose([torchvision.transforms.Grayscale(num_output_channels=1),\r\n",
        "                                                                                                  torchvision.transforms.CenterCrop((28,28)),\r\n",
        "                                    torchvision.transforms.ToTensor()]))\r\n",
        "\r\n",
        "\r\n",
        "for i in range(9):\r\n",
        "    train_data2 = torchvision.datasets.CIFAR10(root='./data', train=True,\r\n",
        "                                        download=True, transform=torchvision.transforms.Compose([torchvision.transforms.Grayscale(num_output_channels=1),\r\n",
        "                                                                                                  torchvision.transforms.CenterCrop((28,28)),\r\n",
        "                                    torchvision.transforms.ToTensor()]))\r\n",
        "    train_data = train_data + train_data2\r\n",
        "\r\n",
        "trainsetcifar = torch.utils.data.ConcatDataset(train_data)\r\n",
        "\r\n",
        "testsetcifar = torchvision.datasets.CIFAR10(root='./data', train=False,\r\n",
        "                                        download=True, transform=torchvision.transforms.Compose([torchvision.transforms.Grayscale(num_output_channels=1),\r\n",
        "                                                                                                 torchvision.transforms.CenterCrop((28,28)),\r\n",
        "                                    torchvision.transforms.ToTensor()]))\r\n",
        "\r\n",
        "classescifar = ('plane', 'car', 'bird', 'cat',\r\n",
        "           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U9b-i7_U_1Ok"
      },
      "source": [
        "#Use dataloaders for train and test (batch size is 64)\r\n",
        "\r\n",
        "trainloadercifar = torch.utils.data.DataLoader(train_data, batch_size=64,\r\n",
        "                                          shuffle=True)\r\n",
        "\r\n",
        "testloadercifar = torch.utils.data.DataLoader(testsetcifar, batch_size=64,\r\n",
        "                                         shuffle=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J5KnnIfR_gGT"
      },
      "source": [
        "net_cifar = CNNFMnist().cuda()\r\n",
        "criterion = nn.CrossEntropyLoss()\r\n",
        "optimizer = torch.optim.SGD(net_cifar.parameters(), lr = 0.001, momentum=0.9)\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EG3NHtSa_q-7",
        "outputId": "0df0c3c8-76d8-4389-89ae-952f900af20b"
      },
      "source": [
        "for epoch in range(10):\r\n",
        "\r\n",
        "    running_train_loss = 0.0\r\n",
        "    for i, data in enumerate(trainloadercifar, 0):\r\n",
        "        inputs, labels = data\r\n",
        "        inputs = inputs.cuda() # -- For GPU\r\n",
        "        labels = labels.cuda() # -- For GPU\r\n",
        "\r\n",
        "        optimizer.zero_grad()\r\n",
        "\r\n",
        "        _, outputs = net_cifar(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        loss.backward()\r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        running_train_loss += loss.item()\r\n",
        "        if (i+1) % 1000 == 0:    \r\n",
        "            #interval_tuples.append(str((epoch + 1, i + 1)))\r\n",
        "            #train_loss.append(running_train_loss / 1000)\r\n",
        "            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_train_loss / 1000))\r\n",
        "            running_train_loss = 0.0\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1,  1000] loss: 2.303\n",
            "[1,  2000] loss: 2.302\n",
            "[1,  3000] loss: 2.302\n",
            "[1,  4000] loss: 2.300\n",
            "[1,  5000] loss: 2.297\n",
            "[1,  6000] loss: 2.285\n",
            "[1,  7000] loss: 2.246\n",
            "[2,  1000] loss: 2.121\n",
            "[2,  2000] loss: 2.050\n",
            "[2,  3000] loss: 1.962\n",
            "[2,  4000] loss: 1.883\n",
            "[2,  5000] loss: 1.820\n",
            "[2,  6000] loss: 1.782\n",
            "[2,  7000] loss: 1.731\n",
            "[3,  1000] loss: 1.689\n",
            "[3,  2000] loss: 1.651\n",
            "[3,  3000] loss: 1.639\n",
            "[3,  4000] loss: 1.606\n",
            "[3,  5000] loss: 1.580\n",
            "[3,  6000] loss: 1.560\n",
            "[3,  7000] loss: 1.549\n",
            "[4,  1000] loss: 1.508\n",
            "[4,  2000] loss: 1.479\n",
            "[4,  3000] loss: 1.461\n",
            "[4,  4000] loss: 1.437\n",
            "[4,  5000] loss: 1.430\n",
            "[4,  6000] loss: 1.414\n",
            "[4,  7000] loss: 1.385\n",
            "[5,  1000] loss: 1.357\n",
            "[5,  2000] loss: 1.349\n",
            "[5,  3000] loss: 1.319\n",
            "[5,  4000] loss: 1.319\n",
            "[5,  5000] loss: 1.302\n",
            "[5,  6000] loss: 1.293\n",
            "[5,  7000] loss: 1.280\n",
            "[6,  1000] loss: 1.237\n",
            "[6,  2000] loss: 1.228\n",
            "[6,  3000] loss: 1.229\n",
            "[6,  4000] loss: 1.206\n",
            "[6,  5000] loss: 1.202\n",
            "[6,  6000] loss: 1.187\n",
            "[6,  7000] loss: 1.173\n",
            "[7,  1000] loss: 1.150\n",
            "[7,  2000] loss: 1.134\n",
            "[7,  3000] loss: 1.123\n",
            "[7,  4000] loss: 1.121\n",
            "[7,  5000] loss: 1.104\n",
            "[7,  6000] loss: 1.093\n",
            "[7,  7000] loss: 1.099\n",
            "[8,  1000] loss: 1.051\n",
            "[8,  2000] loss: 1.051\n",
            "[8,  3000] loss: 1.050\n",
            "[8,  4000] loss: 1.036\n",
            "[8,  5000] loss: 1.033\n",
            "[8,  6000] loss: 1.031\n",
            "[8,  7000] loss: 1.018\n",
            "[9,  1000] loss: 0.987\n",
            "[9,  2000] loss: 0.986\n",
            "[9,  3000] loss: 0.973\n",
            "[9,  4000] loss: 0.970\n",
            "[9,  5000] loss: 0.967\n",
            "[9,  6000] loss: 0.960\n",
            "[9,  7000] loss: 0.948\n",
            "[10,  1000] loss: 0.921\n",
            "[10,  2000] loss: 0.918\n",
            "[10,  3000] loss: 0.919\n",
            "[10,  4000] loss: 0.900\n",
            "[10,  5000] loss: 0.901\n",
            "[10,  6000] loss: 0.904\n",
            "[10,  7000] loss: 0.893\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xTkOhfzMS5Im"
      },
      "source": [
        "class CNNFMnist2(nn.Module):\r\n",
        "    def __init__(self, trained_cnnfmnist2_model):\r\n",
        "        super(CNNFMnist2, self).__init__()\r\n",
        "        self.trained_cnnfmnist2_model = trained_cnnfmnist2_model\r\n",
        "        self.fc1 = nn.Linear(64, 32)\r\n",
        "        self.fc2 = nn.Linear(32, 16)\r\n",
        "        self.fc3 = nn.Linear(16, 10)\r\n",
        "\r\n",
        "    def forward(self, x):\r\n",
        "        x,_ = self.trained_cnnfmnist2_model(x)\r\n",
        "        #x = torch.flatten(x, start_dim=1)\r\n",
        "        x = F.relu(self.fc1(x))\r\n",
        "        x = F.relu(self.fc2(x))\r\n",
        "        x = self.fc3(x)\r\n",
        "        return x"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_CcY3cVsGHje"
      },
      "source": [
        "def accuracy(net):\r\n",
        "  correct = 0\r\n",
        "  total = 0\r\n",
        "  with torch.no_grad():\r\n",
        "      for data in testloader:\r\n",
        "          images, labels = data\r\n",
        "          images = images.cuda()  # -- for GPU\r\n",
        "          labels = labels.cuda()  # -- for GPU\r\n",
        "\r\n",
        "          outputs = net(images)\r\n",
        "          _, predicted = torch.max(outputs, 1)\r\n",
        "          total += labels.size(0)\r\n",
        "          correct += (predicted == labels).sum().item()\r\n",
        "  print('Accuracy of the network on the test images: %d %%' % (100 * correct / total))\r\n",
        "  return (100 * correct / total)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pu3V9NcRGFJl",
        "outputId": "09d80148-ac2b-4aa1-ee15-c0d312e42c18"
      },
      "source": [
        "#pretarined\r\n",
        "pretarined = CNNFMnist2(net_cifar).cuda()\r\n",
        "criterion = nn.CrossEntropyLoss()\r\n",
        "optimizer = torch.optim.SGD(pretarined.parameters(), lr = 0.001, momentum=0.9)\r\n",
        "\r\n",
        "start = torch.cuda.Event(enable_timing=True)\r\n",
        "end = torch.cuda.Event(enable_timing=True)\r\n",
        "\r\n",
        "start.record()\r\n",
        "\r\n",
        "for epoch in range(10):\r\n",
        "\r\n",
        "    running_train_loss = 0.0\r\n",
        "    for i, data in enumerate(trainloader, 0):\r\n",
        "        inputs, labels = data\r\n",
        "        inputs = inputs.cuda() # -- For GPU\r\n",
        "        labels = labels.cuda() # -- For GPU\r\n",
        "\r\n",
        "        optimizer.zero_grad()\r\n",
        "\r\n",
        "        outputs = pretarined(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        loss.backward()\r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        running_train_loss += loss.item()\r\n",
        "        if (i+1) % 1000 == 0:    \r\n",
        "            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_train_loss / 1000))\r\n",
        "            running_train_loss = 0.0\r\n",
        "\r\n",
        "end.record()\r\n",
        "# Waits for everything to finish running\r\n",
        "torch.cuda.synchronize()\r\n",
        "\r\n",
        "pretrained_seconds=(start.elapsed_time(end)/1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1,  1000] loss: 1.021\n",
            "[1,  2000] loss: 0.717\n",
            "[1,  3000] loss: 0.651\n",
            "[1,  4000] loss: 0.609\n",
            "[1,  5000] loss: 0.567\n",
            "[1,  6000] loss: 0.570\n",
            "[1,  7000] loss: 0.561\n",
            "[1,  8000] loss: 0.531\n",
            "[1,  9000] loss: 0.514\n",
            "[1, 10000] loss: 0.534\n",
            "[1, 11000] loss: 0.519\n",
            "[1, 12000] loss: 0.510\n",
            "[1, 13000] loss: 0.500\n",
            "[1, 14000] loss: 0.484\n",
            "[1, 15000] loss: 0.470\n",
            "[2,  1000] loss: 0.464\n",
            "[2,  2000] loss: 0.440\n",
            "[2,  3000] loss: 0.441\n",
            "[2,  4000] loss: 0.424\n",
            "[2,  5000] loss: 0.435\n",
            "[2,  6000] loss: 0.458\n",
            "[2,  7000] loss: 0.426\n",
            "[2,  8000] loss: 0.437\n",
            "[2,  9000] loss: 0.437\n",
            "[2, 10000] loss: 0.426\n",
            "[2, 11000] loss: 0.459\n",
            "[2, 12000] loss: 0.426\n",
            "[2, 13000] loss: 0.407\n",
            "[2, 14000] loss: 0.411\n",
            "[2, 15000] loss: 0.428\n",
            "[3,  1000] loss: 0.404\n",
            "[3,  2000] loss: 0.365\n",
            "[3,  3000] loss: 0.402\n",
            "[3,  4000] loss: 0.382\n",
            "[3,  5000] loss: 0.395\n",
            "[3,  6000] loss: 0.389\n",
            "[3,  7000] loss: 0.389\n",
            "[3,  8000] loss: 0.399\n",
            "[3,  9000] loss: 0.371\n",
            "[3, 10000] loss: 0.391\n",
            "[3, 11000] loss: 0.392\n",
            "[3, 12000] loss: 0.390\n",
            "[3, 13000] loss: 0.382\n",
            "[3, 14000] loss: 0.379\n",
            "[3, 15000] loss: 0.393\n",
            "[4,  1000] loss: 0.343\n",
            "[4,  2000] loss: 0.349\n",
            "[4,  3000] loss: 0.368\n",
            "[4,  4000] loss: 0.351\n",
            "[4,  5000] loss: 0.350\n",
            "[4,  6000] loss: 0.359\n",
            "[4,  7000] loss: 0.369\n",
            "[4,  8000] loss: 0.357\n",
            "[4,  9000] loss: 0.349\n",
            "[4, 10000] loss: 0.365\n",
            "[4, 11000] loss: 0.363\n",
            "[4, 12000] loss: 0.337\n",
            "[4, 13000] loss: 0.371\n",
            "[4, 14000] loss: 0.383\n",
            "[4, 15000] loss: 0.368\n",
            "[5,  1000] loss: 0.365\n",
            "[5,  2000] loss: 0.324\n",
            "[5,  3000] loss: 0.313\n",
            "[5,  4000] loss: 0.316\n",
            "[5,  5000] loss: 0.341\n",
            "[5,  6000] loss: 0.341\n",
            "[5,  7000] loss: 0.357\n",
            "[5,  8000] loss: 0.340\n",
            "[5,  9000] loss: 0.321\n",
            "[5, 10000] loss: 0.330\n",
            "[5, 11000] loss: 0.339\n",
            "[5, 12000] loss: 0.342\n",
            "[5, 13000] loss: 0.370\n",
            "[5, 14000] loss: 0.334\n",
            "[5, 15000] loss: 0.348\n",
            "[6,  1000] loss: 0.315\n",
            "[6,  2000] loss: 0.345\n",
            "[6,  3000] loss: 0.316\n",
            "[6,  4000] loss: 0.313\n",
            "[6,  5000] loss: 0.319\n",
            "[6,  6000] loss: 0.320\n",
            "[6,  7000] loss: 0.325\n",
            "[6,  8000] loss: 0.333\n",
            "[6,  9000] loss: 0.309\n",
            "[6, 10000] loss: 0.345\n",
            "[6, 11000] loss: 0.327\n",
            "[6, 12000] loss: 0.311\n",
            "[6, 13000] loss: 0.318\n",
            "[6, 14000] loss: 0.327\n",
            "[6, 15000] loss: 0.336\n",
            "[7,  1000] loss: 0.306\n",
            "[7,  2000] loss: 0.286\n",
            "[7,  3000] loss: 0.323\n",
            "[7,  4000] loss: 0.324\n",
            "[7,  5000] loss: 0.294\n",
            "[7,  6000] loss: 0.297\n",
            "[7,  7000] loss: 0.324\n",
            "[7,  8000] loss: 0.322\n",
            "[7,  9000] loss: 0.287\n",
            "[7, 10000] loss: 0.301\n",
            "[7, 11000] loss: 0.327\n",
            "[7, 12000] loss: 0.330\n",
            "[7, 13000] loss: 0.305\n",
            "[7, 14000] loss: 0.305\n",
            "[7, 15000] loss: 0.314\n",
            "[8,  1000] loss: 0.289\n",
            "[8,  2000] loss: 0.303\n",
            "[8,  3000] loss: 0.297\n",
            "[8,  4000] loss: 0.297\n",
            "[8,  5000] loss: 0.288\n",
            "[8,  6000] loss: 0.307\n",
            "[8,  7000] loss: 0.291\n",
            "[8,  8000] loss: 0.297\n",
            "[8,  9000] loss: 0.320\n",
            "[8, 10000] loss: 0.277\n",
            "[8, 11000] loss: 0.288\n",
            "[8, 12000] loss: 0.320\n",
            "[8, 13000] loss: 0.316\n",
            "[8, 14000] loss: 0.287\n",
            "[8, 15000] loss: 0.305\n",
            "[9,  1000] loss: 0.298\n",
            "[9,  2000] loss: 0.294\n",
            "[9,  3000] loss: 0.283\n",
            "[9,  4000] loss: 0.269\n",
            "[9,  5000] loss: 0.289\n",
            "[9,  6000] loss: 0.288\n",
            "[9,  7000] loss: 0.291\n",
            "[9,  8000] loss: 0.313\n",
            "[9,  9000] loss: 0.278\n",
            "[9, 10000] loss: 0.309\n",
            "[9, 11000] loss: 0.291\n",
            "[9, 12000] loss: 0.283\n",
            "[9, 13000] loss: 0.282\n",
            "[9, 14000] loss: 0.276\n",
            "[9, 15000] loss: 0.286\n",
            "[10,  1000] loss: 0.272\n",
            "[10,  2000] loss: 0.272\n",
            "[10,  3000] loss: 0.276\n",
            "[10,  4000] loss: 0.284\n",
            "[10,  5000] loss: 0.296\n",
            "[10,  6000] loss: 0.292\n",
            "[10,  7000] loss: 0.258\n",
            "[10,  8000] loss: 0.279\n",
            "[10,  9000] loss: 0.283\n",
            "[10, 10000] loss: 0.295\n",
            "[10, 11000] loss: 0.275\n",
            "[10, 12000] loss: 0.267\n",
            "[10, 13000] loss: 0.272\n",
            "[10, 14000] loss: 0.296\n",
            "[10, 15000] loss: 0.279\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PVJ2yqIqk7JH",
        "outputId": "1ae3e7e2-e909-472d-ecb8-280fd10c77c2"
      },
      "source": [
        "a = accuracy(pretarined)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the test images: 87 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0t--jNpp9j50",
        "outputId": "7b413363-654a-4d6a-843a-229469182695"
      },
      "source": [
        "#untrained\r\n",
        "untrained_cifar = CNNFMnist().cuda()\r\n",
        "untrained_net_cifar = CNNFMnist2(untrained_cifar).cuda()\r\n",
        "criterion = nn.CrossEntropyLoss()\r\n",
        "optimizer = torch.optim.SGD(untrained_net_cifar.parameters(), lr = 0.001, momentum=0.9)\r\n",
        "\r\n",
        "start = torch.cuda.Event(enable_timing=True)\r\n",
        "end = torch.cuda.Event(enable_timing=True)\r\n",
        "\r\n",
        "start.record()\r\n",
        "for epoch in range(10):\r\n",
        "\r\n",
        "    running_train_loss = 0.0\r\n",
        "    for i, data in enumerate(trainloader, 0):\r\n",
        "        inputs, labels = data\r\n",
        "        inputs = inputs.cuda() # -- For GPU\r\n",
        "        labels = labels.cuda() # -- For GPU\r\n",
        "\r\n",
        "        optimizer.zero_grad()\r\n",
        "\r\n",
        "        outputs = untrained_net_cifar(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        loss.backward()\r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        running_train_loss += loss.item()\r\n",
        "        if (i+1) % 1000 == 0:    \r\n",
        "            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_train_loss / 1000))\r\n",
        "            running_train_loss = 0.0\r\n",
        "\r\n",
        "end.record()\r\n",
        "# Waits for everything to finish running\r\n",
        "torch.cuda.synchronize()\r\n",
        "\r\n",
        "untrained_seconds=(start.elapsed_time(end)/1000)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1,  1000] loss: 2.310\n",
            "[1,  2000] loss: 2.303\n",
            "[1,  3000] loss: 2.302\n",
            "[1,  4000] loss: 2.303\n",
            "[1,  5000] loss: 2.302\n",
            "[1,  6000] loss: 2.298\n",
            "[1,  7000] loss: 2.008\n",
            "[1,  8000] loss: 1.342\n",
            "[1,  9000] loss: 1.131\n",
            "[1, 10000] loss: 1.025\n",
            "[1, 11000] loss: 0.981\n",
            "[1, 12000] loss: 0.862\n",
            "[1, 13000] loss: 0.825\n",
            "[1, 14000] loss: 0.768\n",
            "[1, 15000] loss: 0.743\n",
            "[2,  1000] loss: 0.719\n",
            "[2,  2000] loss: 0.647\n",
            "[2,  3000] loss: 0.661\n",
            "[2,  4000] loss: 0.610\n",
            "[2,  5000] loss: 0.610\n",
            "[2,  6000] loss: 0.599\n",
            "[2,  7000] loss: 0.566\n",
            "[2,  8000] loss: 0.577\n",
            "[2,  9000] loss: 0.572\n",
            "[2, 10000] loss: 0.547\n",
            "[2, 11000] loss: 0.545\n",
            "[2, 12000] loss: 0.531\n",
            "[2, 13000] loss: 0.545\n",
            "[2, 14000] loss: 0.507\n",
            "[2, 15000] loss: 0.520\n",
            "[3,  1000] loss: 0.510\n",
            "[3,  2000] loss: 0.505\n",
            "[3,  3000] loss: 0.496\n",
            "[3,  4000] loss: 0.489\n",
            "[3,  5000] loss: 0.478\n",
            "[3,  6000] loss: 0.483\n",
            "[3,  7000] loss: 0.464\n",
            "[3,  8000] loss: 0.488\n",
            "[3,  9000] loss: 0.465\n",
            "[3, 10000] loss: 0.448\n",
            "[3, 11000] loss: 0.455\n",
            "[3, 12000] loss: 0.446\n",
            "[3, 13000] loss: 0.445\n",
            "[3, 14000] loss: 0.435\n",
            "[3, 15000] loss: 0.430\n",
            "[4,  1000] loss: 0.421\n",
            "[4,  2000] loss: 0.439\n",
            "[4,  3000] loss: 0.383\n",
            "[4,  4000] loss: 0.421\n",
            "[4,  5000] loss: 0.428\n",
            "[4,  6000] loss: 0.415\n",
            "[4,  7000] loss: 0.421\n",
            "[4,  8000] loss: 0.384\n",
            "[4,  9000] loss: 0.402\n",
            "[4, 10000] loss: 0.414\n",
            "[4, 11000] loss: 0.400\n",
            "[4, 12000] loss: 0.397\n",
            "[4, 13000] loss: 0.385\n",
            "[4, 14000] loss: 0.381\n",
            "[4, 15000] loss: 0.415\n",
            "[5,  1000] loss: 0.396\n",
            "[5,  2000] loss: 0.365\n",
            "[5,  3000] loss: 0.361\n",
            "[5,  4000] loss: 0.368\n",
            "[5,  5000] loss: 0.366\n",
            "[5,  6000] loss: 0.381\n",
            "[5,  7000] loss: 0.384\n",
            "[5,  8000] loss: 0.369\n",
            "[5,  9000] loss: 0.395\n",
            "[5, 10000] loss: 0.347\n",
            "[5, 11000] loss: 0.355\n",
            "[5, 12000] loss: 0.353\n",
            "[5, 13000] loss: 0.367\n",
            "[5, 14000] loss: 0.357\n",
            "[5, 15000] loss: 0.363\n",
            "[6,  1000] loss: 0.326\n",
            "[6,  2000] loss: 0.337\n",
            "[6,  3000] loss: 0.337\n",
            "[6,  4000] loss: 0.335\n",
            "[6,  5000] loss: 0.372\n",
            "[6,  6000] loss: 0.332\n",
            "[6,  7000] loss: 0.374\n",
            "[6,  8000] loss: 0.352\n",
            "[6,  9000] loss: 0.354\n",
            "[6, 10000] loss: 0.344\n",
            "[6, 11000] loss: 0.334\n",
            "[6, 12000] loss: 0.351\n",
            "[6, 13000] loss: 0.340\n",
            "[6, 14000] loss: 0.357\n",
            "[6, 15000] loss: 0.345\n",
            "[7,  1000] loss: 0.314\n",
            "[7,  2000] loss: 0.324\n",
            "[7,  3000] loss: 0.333\n",
            "[7,  4000] loss: 0.322\n",
            "[7,  5000] loss: 0.337\n",
            "[7,  6000] loss: 0.327\n",
            "[7,  7000] loss: 0.348\n",
            "[7,  8000] loss: 0.320\n",
            "[7,  9000] loss: 0.319\n",
            "[7, 10000] loss: 0.328\n",
            "[7, 11000] loss: 0.332\n",
            "[7, 12000] loss: 0.323\n",
            "[7, 13000] loss: 0.355\n",
            "[7, 14000] loss: 0.334\n",
            "[7, 15000] loss: 0.303\n",
            "[8,  1000] loss: 0.313\n",
            "[8,  2000] loss: 0.321\n",
            "[8,  3000] loss: 0.320\n",
            "[8,  4000] loss: 0.313\n",
            "[8,  5000] loss: 0.313\n",
            "[8,  6000] loss: 0.324\n",
            "[8,  7000] loss: 0.315\n",
            "[8,  8000] loss: 0.299\n",
            "[8,  9000] loss: 0.321\n",
            "[8, 10000] loss: 0.318\n",
            "[8, 11000] loss: 0.318\n",
            "[8, 12000] loss: 0.322\n",
            "[8, 13000] loss: 0.303\n",
            "[8, 14000] loss: 0.325\n",
            "[8, 15000] loss: 0.304\n",
            "[9,  1000] loss: 0.313\n",
            "[9,  2000] loss: 0.298\n",
            "[9,  3000] loss: 0.289\n",
            "[9,  4000] loss: 0.296\n",
            "[9,  5000] loss: 0.304\n",
            "[9,  6000] loss: 0.307\n",
            "[9,  7000] loss: 0.292\n",
            "[9,  8000] loss: 0.299\n",
            "[9,  9000] loss: 0.306\n",
            "[9, 10000] loss: 0.302\n",
            "[9, 11000] loss: 0.290\n",
            "[9, 12000] loss: 0.307\n",
            "[9, 13000] loss: 0.318\n",
            "[9, 14000] loss: 0.321\n",
            "[9, 15000] loss: 0.315\n",
            "[10,  1000] loss: 0.278\n",
            "[10,  2000] loss: 0.285\n",
            "[10,  3000] loss: 0.299\n",
            "[10,  4000] loss: 0.304\n",
            "[10,  5000] loss: 0.295\n",
            "[10,  6000] loss: 0.279\n",
            "[10,  7000] loss: 0.308\n",
            "[10,  8000] loss: 0.281\n",
            "[10,  9000] loss: 0.291\n",
            "[10, 10000] loss: 0.292\n",
            "[10, 11000] loss: 0.297\n",
            "[10, 13000] loss: 0.296\n",
            "[10, 14000] loss: 0.291\n",
            "[10, 15000] loss: 0.314\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pmwQbaQzl72A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7db4e98-6792-42be-df3d-562111aac683"
      },
      "source": [
        "b = accuracy(untrained_net_cifar)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the test images: 87 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_ftrLIClB58r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "93142d88-ddaa-4195-8a5c-dc1df1c8378f"
      },
      "source": [
        "#pretrained-freeze\r\n",
        "net_cifar.eval()\r\n",
        "pretrained_net_cifar = CNNFMnist2(net_cifar).cuda()\r\n",
        "criterion = nn.CrossEntropyLoss()\r\n",
        "optimizer = torch.optim.SGD(pretrained_net_cifar.parameters(), lr = 0.001, momentum=0.9)\r\n",
        "\r\n",
        "start = torch.cuda.Event(enable_timing=True)\r\n",
        "end = torch.cuda.Event(enable_timing=True)\r\n",
        "\r\n",
        "start.record()\r\n",
        "for epoch in range(10):\r\n",
        "\r\n",
        "    running_train_loss = 0.0\r\n",
        "    for i, data in enumerate(trainloader, 0):\r\n",
        "        inputs, labels = data\r\n",
        "        inputs = inputs.cuda() # -- For GPU\r\n",
        "        labels = labels.cuda() # -- For GPU\r\n",
        "\r\n",
        "        optimizer.zero_grad()\r\n",
        "\r\n",
        "        outputs = pretrained_net_cifar(inputs)\r\n",
        "        loss = criterion(outputs, labels)\r\n",
        "        loss.backward()\r\n",
        "        optimizer.step()\r\n",
        "\r\n",
        "        running_train_loss += loss.item()\r\n",
        "        if (i+1) % 1000 == 0:    \r\n",
        "            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_train_loss / 1000))\r\n",
        "            running_train_loss = 0.0\r\n",
        "end.record()\r\n",
        "# Waits for everything to finish running\r\n",
        "torch.cuda.synchronize()\r\n",
        "\r\n",
        "pretrained_freeze_seconds=(start.elapsed_time(end)/1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1,  1000] loss: 0.682\n",
            "[1,  2000] loss: 0.345\n",
            "[1,  3000] loss: 0.316\n",
            "[1,  4000] loss: 0.307\n",
            "[1,  5000] loss: 0.307\n",
            "[1,  6000] loss: 0.308\n",
            "[1,  7000] loss: 0.289\n",
            "[1,  8000] loss: 0.292\n",
            "[1,  9000] loss: 0.302\n",
            "[1, 10000] loss: 0.300\n",
            "[1, 11000] loss: 0.289\n",
            "[1, 12000] loss: 0.305\n",
            "[1, 13000] loss: 0.295\n",
            "[1, 14000] loss: 0.278\n",
            "[1, 15000] loss: 0.309\n",
            "[2,  1000] loss: 0.295\n",
            "[2,  2000] loss: 0.279\n",
            "[2,  3000] loss: 0.273\n",
            "[2,  4000] loss: 0.262\n",
            "[2,  5000] loss: 0.264\n",
            "[2,  6000] loss: 0.288\n",
            "[2,  7000] loss: 0.288\n",
            "[2,  8000] loss: 0.266\n",
            "[2,  9000] loss: 0.295\n",
            "[2, 10000] loss: 0.275\n",
            "[2, 11000] loss: 0.287\n",
            "[2, 12000] loss: 0.284\n",
            "[2, 13000] loss: 0.261\n",
            "[2, 14000] loss: 0.288\n",
            "[2, 15000] loss: 0.277\n",
            "[3,  1000] loss: 0.272\n",
            "[3,  2000] loss: 0.250\n",
            "[3,  3000] loss: 0.268\n",
            "[3,  4000] loss: 0.268\n",
            "[3,  5000] loss: 0.264\n",
            "[3,  6000] loss: 0.270\n",
            "[3,  7000] loss: 0.254\n",
            "[3,  8000] loss: 0.276\n",
            "[3,  9000] loss: 0.267\n",
            "[3, 10000] loss: 0.280\n",
            "[3, 11000] loss: 0.270\n",
            "[3, 12000] loss: 0.274\n",
            "[3, 13000] loss: 0.259\n",
            "[3, 14000] loss: 0.260\n",
            "[3, 15000] loss: 0.304\n",
            "[4,  1000] loss: 0.238\n",
            "[4,  2000] loss: 0.258\n",
            "[4,  3000] loss: 0.272\n",
            "[4,  4000] loss: 0.273\n",
            "[4,  5000] loss: 0.257\n",
            "[4,  6000] loss: 0.267\n",
            "[4,  7000] loss: 0.267\n",
            "[4,  8000] loss: 0.252\n",
            "[4,  9000] loss: 0.270\n",
            "[4, 10000] loss: 0.264\n",
            "[4, 11000] loss: 0.254\n",
            "[4, 12000] loss: 0.249\n",
            "[4, 13000] loss: 0.254\n",
            "[4, 14000] loss: 0.268\n",
            "[4, 15000] loss: 0.262\n",
            "[5,  1000] loss: 0.228\n",
            "[5,  2000] loss: 0.248\n",
            "[5,  3000] loss: 0.232\n",
            "[5,  4000] loss: 0.250\n",
            "[5,  5000] loss: 0.248\n",
            "[5,  6000] loss: 0.262\n",
            "[5,  7000] loss: 0.266\n",
            "[5,  8000] loss: 0.263\n",
            "[5,  9000] loss: 0.245\n",
            "[5, 10000] loss: 0.248\n",
            "[5, 11000] loss: 0.258\n",
            "[5, 12000] loss: 0.266\n",
            "[5, 13000] loss: 0.273\n",
            "[5, 14000] loss: 0.253\n",
            "[5, 15000] loss: 0.256\n",
            "[6,  1000] loss: 0.231\n",
            "[6,  2000] loss: 0.248\n",
            "[6,  3000] loss: 0.245\n",
            "[6,  4000] loss: 0.249\n",
            "[6,  5000] loss: 0.246\n",
            "[6,  6000] loss: 0.261\n",
            "[6,  7000] loss: 0.237\n",
            "[6,  8000] loss: 0.246\n",
            "[6,  9000] loss: 0.254\n",
            "[6, 10000] loss: 0.238\n",
            "[6, 11000] loss: 0.249\n",
            "[6, 12000] loss: 0.248\n",
            "[6, 13000] loss: 0.256\n",
            "[6, 14000] loss: 0.250\n",
            "[6, 15000] loss: 0.247\n",
            "[7,  1000] loss: 0.255\n",
            "[7,  2000] loss: 0.229\n",
            "[7,  3000] loss: 0.233\n",
            "[7,  4000] loss: 0.232\n",
            "[7,  5000] loss: 0.230\n",
            "[7,  6000] loss: 0.241\n",
            "[7,  7000] loss: 0.234\n",
            "[7,  8000] loss: 0.240\n",
            "[7,  9000] loss: 0.244\n",
            "[7, 10000] loss: 0.251\n",
            "[7, 11000] loss: 0.248\n",
            "[7, 12000] loss: 0.247\n",
            "[7, 13000] loss: 0.256\n",
            "[7, 14000] loss: 0.233\n",
            "[7, 15000] loss: 0.242\n",
            "[8,  1000] loss: 0.237\n",
            "[8,  2000] loss: 0.233\n",
            "[8,  3000] loss: 0.235\n",
            "[8,  4000] loss: 0.241\n",
            "[8,  5000] loss: 0.232\n",
            "[8,  6000] loss: 0.251\n",
            "[8,  7000] loss: 0.232\n",
            "[8,  8000] loss: 0.230\n",
            "[8,  9000] loss: 0.241\n",
            "[8, 10000] loss: 0.224\n",
            "[8, 11000] loss: 0.221\n",
            "[8, 12000] loss: 0.241\n",
            "[8, 13000] loss: 0.264\n",
            "[8, 14000] loss: 0.250\n",
            "[8, 15000] loss: 0.257\n",
            "[9,  1000] loss: 0.237\n",
            "[9,  2000] loss: 0.230\n",
            "[9,  3000] loss: 0.234\n",
            "[9,  4000] loss: 0.214\n",
            "[9,  5000] loss: 0.237\n",
            "[9,  6000] loss: 0.228\n",
            "[9,  7000] loss: 0.237\n",
            "[9,  8000] loss: 0.235\n",
            "[9,  9000] loss: 0.214\n",
            "[9, 10000] loss: 0.220\n",
            "[9, 11000] loss: 0.227\n",
            "[9, 12000] loss: 0.239\n",
            "[9, 13000] loss: 0.249\n",
            "[9, 14000] loss: 0.244\n",
            "[9, 15000] loss: 0.257\n",
            "[10,  1000] loss: 0.210\n",
            "[10,  3000] loss: 0.233\n",
            "[10,  4000] loss: 0.228\n",
            "[10,  5000] loss: 0.226\n",
            "[10,  6000] loss: 0.237\n",
            "[10,  7000] loss: 0.226\n",
            "[10,  8000] loss: 0.224\n",
            "[10,  9000] loss: 0.223\n",
            "[10, 10000] loss: 0.220\n",
            "[10, 11000] loss: 0.243\n",
            "[10, 12000] loss: 0.239\n",
            "[10, 13000] loss: 0.248\n",
            "[10, 14000] loss: 0.225\n",
            "[10, 15000] loss: 0.243\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QqUCb8HnnDGd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1265b5a8-a375-426a-f5d0-31d989aafd02"
      },
      "source": [
        "c = accuracy(pretrained_net_cifar)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the test images: 88 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "_v6GzAY11itq",
        "outputId": "8012afb3-4af9-49a1-c325-e230e6e571eb"
      },
      "source": [
        "plt.bar(('pretrained', 'untrained', 'pretrained_freeze'), (pretrained_seconds, untrained_seconds, pretrained_freeze_seconds))\r\n",
        "plt.title('time (in seconds)')\r\n",
        "plt.show()\r\n",
        "\r\n",
        "plt.bar(('pretrained', 'untrained', 'pretrained_freeze'), (a, b, c))\r\n",
        "plt.title('accuracy')\r\n",
        "\r\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vm5DnMate6s0"
      },
      "source": [
        "# Submission instructions\n",
        "\n",
        "You should submit a pdf file with the following items:\n",
        "\n",
        "CPU Experiment:\n",
        "*   Plot of loss curves (train in blue, test in red)\n",
        "*   Training time\n",
        "\n",
        "GPU Experiment:\n",
        "*   Plot of loss curves (train in blue, test in red)\n",
        "*   Training time\n",
        "\n",
        "Transfer Learning Experiment:\n",
        "* Accuracy results on test set for the 2-3 implemeted settings (see above)\n",
        "\n",
        "Link for your collab notebook.\n",
        "ID and names of submitters.\n",
        "\n",
        "\n",
        "Good luck!"
      ]
    }
  ]
}